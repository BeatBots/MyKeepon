= Keepon Reverse Engineering Document =

== Author Info

Kyle Machulis <kyle@nonpolynomial.com>
v1.1, Nov 14, 2011

== Description ==

Keepoff is a project to reverse engineer with BeatBots/WowToys
MyKeepon Dancing robot. 

http://mykeepon.com/

== Hardware ==

=== Board Image ===

An annotated image of the circuit board is available at

http://www.flickr.com/photos/qdot76367/6296272375/in/photostream

=== Sensors ===

* Microphone
* Buttons
* Servos (encoders?)

=== Processors and Components ===

* Padauk P234CS24 - http://www.jaolen.com/UploadFile/Content/2010091911223399.pdf
* Padauk P232CS14 - http://www.padauk.com.tw/admin/includes/getfile.php?file_name=ZmlsZTEuUDIzMl9EUzAyMUUucGRm
* APW7145 - http://www.lierda.com/upload/editor/20081212/1229063275.pdf

Pinouts:

P232CS14:
* PIN1 - I2C CLK
* PIN14 - I2C DATA

P234CS24:
* PIN11 - I2C CLK
* PIN24 - I2C DATA

=== Buttons ===

* Front (Touch/Music)
* Body (Head, Sides)

== Line Protocols ==

The two processors in the Keepon robot communicate with each other via
the I2C protocol. A set of pads to watch communication between the
chips is available on the circuit board, in the corner near the happy
face.

The communication is 0V (GND) Low, +3.3V High. However, the internal
microcontrollers are 5v tolerant.

To be able to control the system using the commands listed below, the
microcontroller that works as the master node must be put into slave
mode. This is done by pulling the I2C data and clock lines to ground
for 1 second while the keepon is powering up or coming out of sleep.
After this, the bus can be controlled by outside systems.

== Devices and Commands ==

The following device addresses are available:

* 0x52 - Sound bank access/playing
* 0x55 - Servos for turning whole unit?

=== Device Sleep ===

Assuming no interaction takes place for 3 minutes, the robot will put
itself to sleep. This will cause the data/clock lines on the I2C bus
to both drop to ground.

=== Device Wakeup ===

To wake up the device from sleep mode, pull the V line on the exposed
I2C pads to ground.

=== Servos ===

* Device Address: 0x55

Keepon has 4 servos: The main base rotation, right/left body bend,
forward/back body bend, and up/down "squat".

Messages written to the motors are as follows:

------
0x55 0xAA 0xBB 0xCC
------

* 0xAA - servo index. 
* 0xBB - current servo position
* 0xCC - unknown? Seems to be only 255 or single bit values (powers of 2)?

==== Main Rotation Base ====

* Motor Index: 0x04
* Servo Position: 0xBB
* Movement Speed: 0xCC

==== Forward/Back Bend ====

* Motor Index: 0x02
* Servo Position: 0xBB
* Movement Speed: 0xCC

==== Up/Down Squat and Right/Left Bend ====

* Motor Index: 0x00
* Bend: 0xBB < 0x80
* Squat: 0xBB > 0x80
* Speed: 0xCC

=== Motor Macros ===

* Motor Index: 0x06?

==== Motor Status? ====

A common communications event is to write a 0 to Device 0x55, then
read 12 bytes from it. Not really sure what these return bytes mean.
This happens about once every 14ms.

=== Sound Banks ===

* Device Index: 0x52
* Message Format: 0x52 0x01 0xAA
** 145 - Up Wakeup Sound
** 146 - Down Wakeup Sound
** 150 - Initial Boot Sound?
** 156 - Chirp
** 151 - Sigh
** 154 - Yawn Up
** 149 - Yawn Down
** 155 - Sleep
** 172 - Whine
** 189 - Up/Down noise when squatting
** 188 - Beep noise when head hit
** 191 - Sneeze Up
** 192 - Sneeze Down

=== Buttons - Front/Base ===

Button status is found from reading a single byte from Device 0x50.

* Device Index: 0x50
* Button Indexes:
** 0x01 - Music Mode Front Button
** 0x02 - Unused?
** 0x04 - Top of Head
** 0x08 - Touch Mode Front Button
** 0x10 - Left Body (Facing toward user)
** 0x20 - Front Body
** 0x40 - Right Body (Facing toward user)
** 0x80 - Back Body

=== Microphone ===

Microphone information is not sent over the I2C bus.
